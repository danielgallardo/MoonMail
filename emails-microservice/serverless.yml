service: MoonMail-v2-emails

plugins:
  - serverless-plugin-optimize
  - serverless-offline

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  resourcesPrefix: ${self:service}-${self:custom.currentStage}
  ssmPath: /moonmail/emails-microservice/${self:custom.currentStage}
  legacyEmailNotificationsTopicArn: ${ssm:${self:custom.ssmPath}/legacy-notifications-topic-arn}
  config: ${file(./config.${self:custom.currentStage}.json), ""}
  emailNotificationsTopicName: ${self:custom.resourcesPrefix}-EmailNotificationsTopic
  emailNotificationsTopicArn:
    Fn::Join:
      - ":"
      - - arn:aws:sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - ${self:custom.emailNotificationsTopicName}
  emailEventTopicName: ${self:custom.resourcesPrefix}-EmailEvent
  emailEventTopicArn:
    Fn::Join:
      - ":"
      - - arn:aws:sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - ${self:custom.emailEventTopicName}
  serverless-offline:
    babelOptions:
      presets: ["es2015"]

provider:
  name: aws
  runtime: nodejs6.10
  profile: ${opt:profile, ""}
  region: ${opt:region}
  timeout: 300
  environment:
    REGION: ${self:provider.region}
    EVENTS_ROUTER_STREAM_NAME:
      Fn::ImportValue: EventsRouterStreamName-${self:custom.currentStage}
    CLICKS_TABLE: ${self:custom.config.CLICKS_TABLE, env:CLICKS_TABLE}
    OPENS_TABLE: ${self:custom.config.OPENS_TABLE, env:OPENS_TABLE}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "kinesis:putRecord"
        - "dynamodb:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: ${self:custom.emailEventTopicArn}

package:
  individually: true

functions:
  processSesNotification:
    handler: handler.processSesNotification
    events:
      - sns:
          arn: ${self:custom.emailNotificationsTopicArn}
          topicName: ${self:custom.emailNotificationsTopicName}
      - sns:
          arn: ${self:custom.legacyEmailNotificationsTopicArn}
          topicName: LegacyEmailNotifications
  processLinkClick:
    handler: handler.processLinkClick
    events:
      - http:
          path: /links/click/{campaignId}/{linkId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                campaignId: true
                linkId: true
    environment:
      EMAIL_EVENT_TOPIC_ARN: ${self:custom.emailEventTopicArn}
  processEmailOpen:
    handler: handler.processEmailOpen
    events:
      - http:
          path: /links/open/{campaignId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                campaignId: true
    environment:
      EMAIL_EVENT_TOPIC_ARN: ${self:custom.emailEventTopicArn}
  persistEmailEvent:
    handler: handler.persistEmailEvent
    events:
      - sns:
          topicName: ${self:custom.emailEventTopicName}
          displayName: Notifies link clicks


resources:
  Resources:
    EmailNotificationsTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: ${self:custom.emailNotificationsTopicName}
    EmailNotificationsTopicPolicy:
      Type: "AWS::SNS::TopicPolicy"
      Properties:
        PolicyDocument:
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: "*"
              Action: "SNS:Publish"
              Resource:
                Ref: EmailNotificationsTopic
        Topics:
          -
            Ref: EmailNotificationsTopic
